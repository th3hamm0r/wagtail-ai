import React, { useState, useRef } from 'react';
import jsxRuntime from 'react/jsx-runtime';
import { EditorState } from 'draft-js';
import { ControlComponentProps, Icon } from 'draftail';
import { createPortal } from 'react-dom';
import { useOutsideAlerter } from './hooks';
import WandIcon from './WandIcon';
import { handleAppend, handleReplace, processAction } from './utils';

import type { ToolbarButtonProps } from 'draftail';
import type { Prompt } from './custom';


// Generated by asking ChatGPT 'Generate a list of loading messages which mean "Loading response from AI chat bot"'...
const LOADING_MESSAGES = [
  'Processing your query, please wait...',
  'Analyzing your input, just a moment...',
  'Generating a response, hold on...',
  'Thinking, thinking, thinking...',
  'Fetching data, almost there...',
  'Compiling information, please wait...',
  'Crunching numbers, please be patient...',
  'Analyzing data, loading...',
  'Preparing response, please wait...',
  'Interpreting your message, loading...',
];

function LoadingOverlay() {
  const loadingMessage =
    LOADING_MESSAGES[Math.floor(Math.random() * LOADING_MESSAGES.length)];

  return (
    <div className="Draftail-AI-LoadingOverlay">
      <span>
        <svg className="icon icon-spinner c-spinner" aria-hidden="true">
          <use href="#icon-spinner" />
        </svg>
        {loadingMessage}
      </span>
    </div>
  );
}

function ToolbarDropdown({ close, onAction }: { close: any, onAction: (prompt: Prompt) => void }) {
  const toolBarRef = useRef(null);
  // Close the dropdown when user clicks outside of it
  useOutsideAlerter(toolBarRef, close);

  return (
    <div 
      ref={toolBarRef}
      className="Draftail-AI-ButtonDropdown"
    >
      {window.WAGTAIL_AI_PROMPTS.map((prompt) => (
        <button type="button" onMouseDown={() => onAction(prompt)}>
          <span>{prompt.label}</span> {prompt.description}
        </button>
      ))}
    </div>
  );
}

interface ToolbarButtonState {
  showTooltipOnHover: boolean;
}
interface CustomToolbarButtonProps extends Omit<ToolbarButtonProps, 'onClick'> {
  onClick?: ((e: MouseEvent, name: string) => void) | null | undefined;
}

/*
* This is a copy of the ToolbarButton component from draftail, with a modified onMouseDown method
* with to pass events to onClick 
* TODO open and reference issue here
*/
class CustomToolbarButton extends React.PureComponent<CustomToolbarButtonProps, ToolbarButtonState> {
    constructor(props: CustomToolbarButtonProps) {
        super(props);
        this.state = {
            showTooltipOnHover: true,
        };
        this.onMouseDown = this.onMouseDown.bind(this);
        this.onMouseLeave = this.onMouseLeave.bind(this);
    }
    onMouseDown(e: MouseEvent) {
      const { name, onClick } = this.props;
      e.preventDefault();
      this.setState({
        showTooltipOnHover: false,
      });
      if (onClick) {
        onClick(e, name || "");
      }
    }
    onMouseLeave() {
        this.setState({
            showTooltipOnHover: true,
        });
    }
    render() {
        const { name, active, label, title, icon, className, tooltipDirection } = this.props;
        const { showTooltipOnHover } = this.state;
        const showTooltip = title && showTooltipOnHover;
        // @ts-ignore
        return (jsxRuntime.jsxs("button", { name: name, className: `Draftail-ToolbarButton ${className || ""}${active ? " Draftail-ToolbarButton--active" : ""}`, type: "button", "aria-label": title || undefined, "data-draftail-balloon": showTooltip ? tooltipDirection || "up" : null, tabIndex: -1, onMouseDown: this.onMouseDown, onMouseLeave: this.onMouseLeave, children: [icon ? jsxRuntime.jsx(Icon, { icon: icon }) : null, label ? (jsxRuntime.jsx("span", { className: "Draftail-ToolbarButton__label", children: label })) : null] }));
    }
}

type ControlComponentPropsExtended = ControlComponentProps & {
  field: any;
};

function AIControl({
  getEditorState,
  onChange,
}: ControlComponentPropsExtended) {
  const editorState = getEditorState() as EditorState;
  const [isLoading, setIsLoading] = useState<Boolean>(false);
  const [isDropdownOpen, setIsDropdownOpen] = useState<Boolean>(false);
  const [error, setError] = useState(null);
  const draftailEditorWrapperRef = useRef<any>(null);

  const handleAction = async (prompt: Prompt) => {
    setError(null);
    setIsDropdownOpen(false);
    setIsLoading(true);
    try {
      if (prompt.method === 'append') {
        onChange(await processAction(editorState, prompt, handleAppend));
      } else {
        onChange(await processAction(editorState, prompt, handleReplace));
      }
    } catch (err) {
      setError(err.message);
    }
    setIsLoading(false);
  };

  const handleClick = (e: any): void => {
    if (!e.target) {
      return
    }
    if (!draftailEditorWrapperRef?.current) {
      // Reference the Draftail editor wrapper so we can insert error messages and loading overlays
      draftailEditorWrapperRef.current = e.target.closest("[data-draftail-editor-wrapper]")
    }
    setIsDropdownOpen(!isDropdownOpen)
  };

  return (
    <>
      <CustomToolbarButton
        name="AI Tools"
        title="AI prompts"
        icon={<WandIcon />}
        onClick={handleClick}
      />
      {isDropdownOpen ? <ToolbarDropdown close={() => setIsDropdownOpen(false)} onAction={handleAction} /> : null}
      {error && draftailEditorWrapperRef?.current
        ? createPortal(
            <>
              <svg
                className="icon icon-warning w-field__errors-icon"
                aria-hidden="true"
              >
                <use href="#icon-warning"></use>
              </svg>
              <p className="error-message">{error}</p>
            </>,
            draftailEditorWrapperRef?.current.previousElementSibling,
          )
        : null}
      {isLoading && draftailEditorWrapperRef?.current ? createPortal(<LoadingOverlay />, 
        draftailEditorWrapperRef?.current 
      ) : null}
    </>
  );
}

export default AIControl;
